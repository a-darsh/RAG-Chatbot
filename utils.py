from langchain.callbacks.base import BaseCallbackHandler
import re

class StreamHandler(BaseCallbackHandler):
    """
    StreamHandler intercepts streaming output from the LLM, updating the UI in real-time.
    """
    def __init__(self, container, initial_text=""):
        """
        Initializes the StreamHandler.

        :param container: Streamlit container for displaying the text.
        :param initial_text: Initial text to display in the container.
        """
        super().__init__()
        self.container = container
        self.text = initial_text

    def on_llm_new_token(self, token: str, **kwargs) -> None:
        """
        Callback function that is called whenever the LLM generates a new token.

        :param token: The new token generated by the LLM.
        """
        self.text += token
        self.container.markdown(self.text, unsafe_allow_html=True)

def clean_text(text):
    """
    Cleans and preprocesses text by removing unwanted characters and whitespace.

    :param text: The text to be cleaned.
    :return: Cleaned text.
    """
    # Remove URLs
    text = re.sub(r"http\S+|www\S+|https\S+", '', text, flags=re.MULTILINE)
    # Replace multiple spaces with a single space
    text = re.sub(r'\s+', ' ', text).strip()
    return text
